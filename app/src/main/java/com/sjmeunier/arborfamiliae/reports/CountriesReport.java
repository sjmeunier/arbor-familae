package com.sjmeunier.arborfamiliae.reports;

import android.content.Context;

import com.sjmeunier.arborfamiliae.data.NameFormat;
import com.sjmeunier.arborfamiliae.database.AppDatabase;
import com.sjmeunier.arborfamiliae.database.Family;
import com.sjmeunier.arborfamiliae.database.FamilyChild;
import com.sjmeunier.arborfamiliae.database.Individual;
import com.sjmeunier.arborfamiliae.database.Place;
import com.sjmeunier.arborfamiliae.util.AncestryUtil;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CountriesReport extends BaseReport {

    private Map<String, Integer> countriesWithCount;
    private List<String> countries;
    private List<Integer> ancestorIds;

    public CountriesReport(Context context, AppDatabase database, Map<Integer, Place> placesInActiveTree, Map<Integer, Individual> individualsInActiveTree, Map<Integer, Family> familiesInActiveTree, List<FamilyChild> familyChildrenInActiveTree, NameFormat nameFormat, int maxGenerations, int treeId) {
        super(context, database, placesInActiveTree, individualsInActiveTree, familiesInActiveTree, familyChildrenInActiveTree, nameFormat, maxGenerations, treeId);
    }

    @Override
    public boolean generateReport(String filename, int activeIndividualId) throws IOException {
        this.configureOutputFile(filename);
        ancestorIds = new ArrayList<>();
        countriesWithCount = new HashMap<>();
        countries = new ArrayList<>();

        if (this.individualsInActiveTree.containsKey(activeIndividualId)) {
            Individual individual = this.individualsInActiveTree.get(activeIndividualId);
            String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
            this.writeLine("Country report of " + AncestryUtil.generateName(individual, this.nameFormat));
            this.writeLine("Generated by Arbor Familiae at " + timeStamp);
            this.writeLine("");
            this.writeLine("");
        }
        this.processIndividual(activeIndividualId, 1, 1);
        this.outputReport();
        this.closeFile();

        return true;
    }

    private void outputReport() throws IOException {
        Collections.sort(countries);
        for(String country : countries) {
            this.writeLine(country + "(" + String.valueOf(countriesWithCount.get(country)) + ")");
        }
    }

    private String getCountryNameFromPlace(Place place) {
        String country = "";
        if (place != null && place.placeName.length() > 0) {
            if (place.placeName.contains(",")){
                String[] parts = place.placeName.split(",");
                country = parts[parts.length - 1].trim();
            } else {
                country = place.placeName;
            }
        }

        return country;
    }

    private void processIndividual(int individualId, int generation, long ahnenNumber) {
        if (!this.individualsInActiveTree.containsKey(individualId))
            return;

        if (!ancestorIds.contains(individualId) && this.individualsInActiveTree.containsKey(individualId)) {
            ancestorIds.add(individualId);
            Individual individual = this.individualsInActiveTree.get(individualId);

            if (individual.birthPlace != -1 && this.placesInActiveTree.get(individual.birthPlace) != null) {
                String country = getCountryNameFromPlace(this.placesInActiveTree.get(individual.birthPlace));
                if (countriesWithCount.containsKey(country)) {
                    countriesWithCount.put(country, countriesWithCount.get(country) + 1);
                } else {
                    countriesWithCount.put(country, 1);
                    countries.add(country);
                }
            }
            if (individual.baptismPlace != -1 && this.placesInActiveTree.get(individual.baptismPlace) != null) {
                String country = getCountryNameFromPlace(this.placesInActiveTree.get(individual.baptismPlace));
                if (countriesWithCount.containsKey(country)) {
                    countriesWithCount.put(country, countriesWithCount.get(country) + 1);
                } else {
                    countriesWithCount.put(country, 1);
                    countries.add(country);
                }            }

            if (individual.diedPlace != -1 && this.placesInActiveTree.get(individual.diedPlace) != null) {
                String country = getCountryNameFromPlace(this.placesInActiveTree.get(individual.diedPlace));
                if (countriesWithCount.containsKey(country)) {
                    countriesWithCount.put(country, countriesWithCount.get(country) + 1);
                } else {
                    countriesWithCount.put(country, 1);
                    countries.add(country);
                }            }

            if (individual.burialPlace != -1 && this.placesInActiveTree.get(individual.burialPlace) != null) {
                String country = getCountryNameFromPlace(this.placesInActiveTree.get(individual.burialPlace));
                if (countriesWithCount.containsKey(country)) {
                    countriesWithCount.put(country, countriesWithCount.get(country) + 1);
                } else {
                    countriesWithCount.put(country, 1);
                    countries.add(country);
                }            }

            List<Family> families = database.familyDao().getAllFamiliesForHusbandOrWife(individual.treeId, individualId);
            for(Family family : families) {
                if (family.marriagePlace != -1 && this.placesInActiveTree.get(family.marriagePlace) != null) {
                    String country = getCountryNameFromPlace(this.placesInActiveTree.get(family.marriagePlace));
                    if (countriesWithCount.containsKey(country)) {
                        countriesWithCount.put(country, countriesWithCount.get(country) + 1);
                    } else {
                        countriesWithCount.put(country, 1);
                        countries.add(country);
                    }                }
            }

            if (generation < this.maxGenerations) {
                if (individual.parentFamilyId != -1 && this.familiesInActiveTree.containsKey(individual.parentFamilyId)) {
                    Family family = this.familiesInActiveTree.get(individual.parentFamilyId);
                    if (family.husbandId != -1) {
                        processIndividual(family.husbandId, generation + 1, ahnenNumber * 2);
                    }
                    if (family.wifeId != -1) {
                        processIndividual(family.wifeId, generation + 1, ahnenNumber * 2 + 1);
                    }
                }
            }
        } else {
            return;
        }

    }
}
