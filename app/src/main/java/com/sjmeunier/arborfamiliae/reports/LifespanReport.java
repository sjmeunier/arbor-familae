package com.sjmeunier.arborfamiliae.reports;

import android.content.Context;

import com.sjmeunier.arborfamiliae.AncestryUtil;
import com.sjmeunier.arborfamiliae.data.NameFormat;
import com.sjmeunier.arborfamiliae.database.AppDatabase;
import com.sjmeunier.arborfamiliae.database.Family;
import com.sjmeunier.arborfamiliae.database.GenderEnum;
import com.sjmeunier.arborfamiliae.database.Individual;
import com.sjmeunier.arborfamiliae.database.Place;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LifespanReport extends BaseReport {

    private List<Integer> ancestorIds;
    private List<Float> maleLifespans = new ArrayList<>();
    private List<Float> femaleLifespans = new ArrayList<>();

    private int maleUnknownLifespans = 0;
    private float averageMaleLifespan = 0;
    private int femaleUnknownLifespans = 0;
    private float averageFemaleLifespan = 0;
    private int oldestMaleId;
    private int oldestFemaleId;
    private double oldestMaleAge = 0;
    private double oldestFemaleAge = 0;

    private Map<Integer, Float> individualAges = new HashMap<>();

    private List<DemographicLifespan> demographicLifespans = new ArrayList<>();

    public LifespanReport(Context context, AppDatabase database, Map<Integer, Place> placesInActiveTree, Map<Integer, Individual> individualsInActiveTree, Map<Integer, Family> familiesInActiveTree, NameFormat nameFormat, int maxGenerations, int treeId) {
        super(context, database, placesInActiveTree, individualsInActiveTree, familiesInActiveTree, nameFormat, maxGenerations, treeId);
    }

    @Override
    public boolean generateReport(String filename, int activeIndividualId) throws IOException {
        this.configureOutputFile(filename);
        ancestorIds = new ArrayList<>();
        maleLifespans = new ArrayList<>();
        femaleLifespans = new ArrayList<>();
        individualAges = new HashMap<>();
        demographicLifespans = new ArrayList<>();

        demographicLifespans.add(new DemographicLifespan(0, 5));
        demographicLifespans.add(new DemographicLifespan(5, 10));
        demographicLifespans.add(new DemographicLifespan(10, 15));
        demographicLifespans.add(new DemographicLifespan(15, 20));
        demographicLifespans.add(new DemographicLifespan(20, 25));
        demographicLifespans.add(new DemographicLifespan(25, 30));
        demographicLifespans.add(new DemographicLifespan(30, 35));
        demographicLifespans.add(new DemographicLifespan(35, 40));
        demographicLifespans.add(new DemographicLifespan(40, 45));
        demographicLifespans.add(new DemographicLifespan(45, 50));
        demographicLifespans.add(new DemographicLifespan(50, 55));
        demographicLifespans.add(new DemographicLifespan(55, 60));
        demographicLifespans.add(new DemographicLifespan(60, 65));
        demographicLifespans.add(new DemographicLifespan(65, 70));
        demographicLifespans.add(new DemographicLifespan(70, 75));
        demographicLifespans.add(new DemographicLifespan(75, 80));
        demographicLifespans.add(new DemographicLifespan(80, 85));
        demographicLifespans.add(new DemographicLifespan(85, 90));
        demographicLifespans.add(new DemographicLifespan(90, 95));
        demographicLifespans.add(new DemographicLifespan(95, 100));
        demographicLifespans.add(new DemographicLifespan(100, 105));
        demographicLifespans.add(new DemographicLifespan(105, 110));
        demographicLifespans.add(new DemographicLifespan(110, 115));
        demographicLifespans.add(new DemographicLifespan(115, 120));


        if (this.individualsInActiveTree.containsKey(activeIndividualId)) {
            Individual individual = this.individualsInActiveTree.get(activeIndividualId);
            String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
            this.writeLine("Lifespan report of " + AncestryUtil.generateName(individual, this.nameFormat));
            this.writeLine("Generated by Arbor Familiae at " + timeStamp);
            this.writeLine("");
            this.writeLine("");
        }
        this.processIndividual(activeIndividualId, 1, 1);
        averageMaleLifespan = getAverage(maleLifespans);
        averageFemaleLifespan = getAverage(femaleLifespans);

        this.outputReport();
        this.closeFile();

        return true;
    }

    private float getAverage(List<Float> numbers) {
        if (numbers.size() == 0)
            return 0;

        float sum = 0;
        for(float number : numbers) {
            sum += number;
        }

        return sum / numbers.size();
    }

    private void outputReport() throws IOException {
        this.writeLine("Total ancestors in report " + String.valueOf(ancestorIds.size()));
        this.writeLine("");
        this.writeLine(String.format("Oldest male ancestor (%.2f years old): %s", oldestMaleAge, AncestryUtil.generateName(this.individualsInActiveTree.get(oldestMaleId), nameFormat)));
        this.writeLine(String.format("Oldest female ancestor (%.2f years old): %s", oldestFemaleAge, AncestryUtil.generateName(this.individualsInActiveTree.get(oldestFemaleId), nameFormat)));

        this.writeLine("------------------------------------------------------------");
        this.writeLine("|                      |   Male    |  Female   |   Total   |");
        this.writeLine("------------------------------------------------------------");
        this.writeLine(String.format("|%-22s|%10d |%10d |%10d |", "Individuals with ages", maleLifespans.size(), femaleLifespans.size(), maleLifespans.size() + femaleLifespans.size()));
        this.writeLine(String.format("|%-22s|%10d |%10d |%10d |", "With unknown ages", maleUnknownLifespans, femaleUnknownLifespans, maleUnknownLifespans + femaleUnknownLifespans));
        this.writeLine("------------------------------------------------------------");
        this.writeLine(String.format("|%-22s|%10.2f |%10.2f |%10.2f |", "Average Lifespan", averageMaleLifespan, averageFemaleLifespan, (averageMaleLifespan + averageFemaleLifespan) / 2.0f));
        this.writeLine("------------------------------------------------------------");
        for(DemographicLifespan demographicLifespan : demographicLifespans) {
            this.writeLine(String.format("|%-22s|%10d |%10d |%10d |", demographicLifespan.name, demographicLifespan.males, demographicLifespan.females, demographicLifespan.total));
        }
        this.writeLine("------------------------------------------------------------");
        this.writeLine("");
        this.writeLine("");
        this.writeLine("Individuals per Demographic");
        this.writeLine("------------------------------------------------------------");
        for (DemographicLifespan demographicLifespan : demographicLifespans)
        {
            this.writeLine(demographicLifespan.name);
            this.writeLine("------------------------------------------------------------");
            for(int individualId : demographicLifespan.individualIds) {
                this.writeLine(String.format("%s (%.2f years old)", AncestryUtil.generateName(this.individualsInActiveTree.get(individualId), nameFormat), individualAges.get(individualId)));
            }
            this.writeLine("------------------------------------------------------------");
            this.writeLine("");
        }

    }

    private void processIndividual(int individualId, int generation, long ahnenNumber) {
        if (!this.individualsInActiveTree.containsKey(individualId))
            return;

        if (!ancestorIds.contains(individualId)) {
            Individual individual = this.individualsInActiveTree.get(individualId);

            ancestorIds.add(individualId);
            float age = AncestryUtil.calculateAge(individual);

            if (age != -1) {
                individualAges.put(individualId, age);

                DemographicLifespan demographicLifespan = null;
                for (DemographicLifespan lifespan : demographicLifespans) {
                    if (lifespan.minAge <= age && lifespan.maxAge > age) {
                        demographicLifespan = lifespan;
                        break;
                    }
                }

                if (individual.gender == GenderEnum.Male) {
                    if (age > oldestMaleAge) {
                        oldestMaleAge = age;
                        oldestMaleId = individualId;
                    }
                    maleLifespans.add(age);

                    if (demographicLifespan != null) {
                        demographicLifespan.males++;
                        demographicLifespan.total++;
                        demographicLifespan.individualIds.add(individualId);
                    }
                } else if (individual.gender == GenderEnum.Female) {
                    if (age > oldestFemaleAge) {
                        oldestFemaleAge = age;
                        oldestFemaleId = individualId;
                    }
                    femaleLifespans.add(age);

                    if (demographicLifespan != null) {
                        demographicLifespan.females++;
                        demographicLifespan.total++;
                        demographicLifespan.individualIds.add(individualId);
                    }

                }
            } else {
                if (individual.gender == GenderEnum.Male) {
                    maleUnknownLifespans++;
                } else if (individual.gender == GenderEnum.Female) {
                    femaleUnknownLifespans++;
                }
            }

            if (generation < this.maxGenerations) {
                if (individual.parentFamilyId != -1 && this.familiesInActiveTree.containsKey(individual.parentFamilyId)) {
                    Family family = this.familiesInActiveTree.get(individual.parentFamilyId);
                    if (family.husbandId != -1) {
                        processIndividual(family.husbandId, generation + 1, ahnenNumber * 2);
                    }
                    if (family.wifeId != -1) {
                        processIndividual(family.wifeId, generation + 1, ahnenNumber * 2 + 1);
                    }
                }
            }

        }


    }
}
