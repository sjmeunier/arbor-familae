package com.sjmeunier.arborfamiliae.reports;

import android.content.Context;

import com.sjmeunier.arborfamiliae.util.AncestryUtil;
import com.sjmeunier.arborfamiliae.data.NameFormat;
import com.sjmeunier.arborfamiliae.database.AppDatabase;
import com.sjmeunier.arborfamiliae.database.Family;
import com.sjmeunier.arborfamiliae.database.FamilyChild;
import com.sjmeunier.arborfamiliae.database.GenderEnum;
import com.sjmeunier.arborfamiliae.database.Individual;
import com.sjmeunier.arborfamiliae.database.Place;
import com.sjmeunier.arborfamiliae.util.ListSearchUtils;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

public class YDNAReport extends BaseReport {

    public YDNAReport(Context context, AppDatabase database, Map<Integer, Place> placesInActiveTree, Map<Integer, Individual> individualsInActiveTree, Map<Integer, Family> familiesInActiveTree, List<FamilyChild> familyChildrenInActiveTree, NameFormat nameFormat, int maxGenerations, int treeId) {
        super(context, database, placesInActiveTree, individualsInActiveTree, familiesInActiveTree, familyChildrenInActiveTree, nameFormat, maxGenerations, treeId);
    }

    @Override
    public boolean generateReport(String filename, int activeIndividualId) throws IOException {
        this.configureOutputFile(filename);
        int rootIndividualId = findRootPerson(activeIndividualId);
        Individual individual = this.individualsInActiveTree.get(rootIndividualId);
        String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
        this.writeLine("Descendants of " + AncestryUtil.generateName(individual, this.nameFormat) + " sharing the same Y-DNA");
        this.writeLine("Generated by Arbor Familiae at " + timeStamp);
        this.writeLine("");
        this.writeLine("");
        processPerson(rootIndividualId, 1);
        closeFile();
        return true;
    }

    private int findRootPerson(int individualId) {
        int rootIndividualId = individualId;
        if (this.individualsInActiveTree.containsKey(individualId)) {
            int parentFamilyId = this.individualsInActiveTree.get(individualId).parentFamilyId;
            if (parentFamilyId != -1 && this.familiesInActiveTree.containsKey(parentFamilyId)) {
                Family family = this.familiesInActiveTree.get(parentFamilyId);
                if (family.husbandId != -1 && this.individualsInActiveTree.containsKey(family.husbandId)) {
                    rootIndividualId = findRootPerson(family.husbandId);
                }
            }
        }
        return rootIndividualId;
    }

    private void processPerson(int individualId, int generation) throws IOException  {
        if (!this.individualsInActiveTree.containsKey(individualId))
            return;

        Individual individual = this.individualsInActiveTree.get(individualId);
        if (individual.gender != GenderEnum.Male)
            return;

        this.writeLine(new String(new char[generation * 2]).replace('\0', ' ') + "- " + AncestryUtil.generateName(individual, this.nameFormat) + " " + AncestryUtil.generateBirthDeathDateWithPlace(individual, this.placesInActiveTree));
        List<Family> families = ListSearchUtils.findFamiliesForWifeOrHusband(individualId, this.familiesInActiveTree);
        for (Family family : families) {
            //Children
            if (generation < this.maxGenerations) {
                List<FamilyChild> familyChildren = ListSearchUtils.findChildrenForFamily(family.familyId, this.familyChildrenInActiveTree);
                for (FamilyChild familyChild : familyChildren) {
                    processPerson(familyChild.individualId, generation + 1);
                }
            }
        }
    }
}
